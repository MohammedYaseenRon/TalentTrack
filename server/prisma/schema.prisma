generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  name          String
  email         String           @unique
  password      String
  role          Role
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  application   Application[]
  comment       Comment[]
  interviewslot InterviewSlot[]
  job           Job[]
  notification  Notification[]
  project       Project[]
  rating        Rating[]
  resume        ResumeAnalysis[]
  task          Task[]
  taskSubmisson TaskSubmisson[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  techStack   String[]
  livedemo    String?
  sourcecode  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  comment     Comment[]
  images      Image[]
  user        User      @relation(fields: [userId], references: [id])
  rating      Rating[]
  tags        Tag[]     @relation("ProjectTags")
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String?
  projectId Int
  createdAt DateTime @default(now())
  type      String
  project   Project  @relation(fields: [projectId], references: [id])
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  projects Project[] @relation("ProjectTags")
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  userId    Int
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model Task {
  id             Int             @id @default(autoincrement())
  title          String
  description    String
  deadline       DateTime
  recruiterId    Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  recruiter      User            @relation(fields: [recruiterId], references: [id])
  taskSubmission TaskSubmisson[]
  taskImage      TaskImage[]
}
model TaskImage {
  id        Int      @id @default(autoincrement())
  url       String?
  createdAt DateTime @default(now())
  type      String
  taskId    Int
  Task      Task     @relation(fields: [taskId], references: [id])
}

model TaskSubmisson {
  id           Int      @id @default(autoincrement())
  taskId       Int
  jobSeekerId  Int
  submissonUrl String
  status       String   @default("submitted")
  submittedAt  DateTime @default(now())
  updatedAt    DateTime @updatedAt
  jobSeeker    User     @relation(fields: [jobSeekerId], references: [id])
  task         Task     @relation(fields: [taskId], references: [id])
}

model Job {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  skills      String[]
  salary      String
  location    String
  deadline    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  recruiterId Int
  application Application[]
  recruiter   User          @relation(fields: [recruiterId], references: [id])
}

model Application {
  id                 Int                @id @default(autoincrement())
  jobId              Int
  userId             Int
  status             Status             @default(PENDING)
  appliedAt          DateTime           @default(now())
  coverLetter        String
  expectedSalary     String?
  noticePeriod       String?
  resumeUrl          String
  job                Job                @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user               User               @relation(fields: [userId], references: [id])
  applicationDetails ApplicationDetail?
  interviews         Interview?
}

model ApplicationDetail {
  id             Int         @id @default(autoincrement())
  applicationId  Int         @unique
  education      Json
  workExperience Json
  skills         String[]
  additionalInfo String?
  application    Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model InterviewSlot {
  id          Int        @id @default(autoincrement())
  startTime   DateTime
  endTime     DateTime
  recruiterId Int
  isBooked    Boolean    @default(false)
  interviewId Int?       @unique
  interview   Interview? @relation(fields: [interviewId], references: [id])
  recruiter   User       @relation(fields: [recruiterId], references: [id])
}

model Interview {
  id              Int               @id @default(autoincrement())
  applicationId   Int               @unique
  scheduledAt     DateTime
  interviewType   InterviewType
  interviewerName String
  notes           String?
  outcome         InterviewOutcome?
  application     Application       @relation(fields: [applicationId], references: [id])
  slot            InterviewSlot?
}

model ResumeAnalysis {
  id         Int      @id @default(autoincrement())
  userId     Int
  fileName   String
  analysis   Json
  analyzedAt DateTime
  user       User     @relation(fields: [userId], references: [id])
}

enum Status {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEWED
  OFFERED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum TaskStatus {
  Open
  InProgess
  Completed
}

enum InterviewType {
  PHONE_SCREENING
  ONSITE
  TECHNICAL
  BEHAVIORAL
  FINAL
}

enum InterviewOutcome {
  PASSED
  FAILED
  RESCHEDULED
  NO_SHOW
}

enum Role {
  RECRUITER
  JOB_SEEKER
}
